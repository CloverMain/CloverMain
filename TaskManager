repeat wait() until game:IsLoaded()
local Player = game:GetService'Players'.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

loadstring(game:HttpGet("https://raw.githubusercontent.com/ScriptMainHolder/Main/main/Password"))()
if table.find(Whitelist, game.Players.LocalPlayer.UserId) or Free == true then
    local vu = game:GetService("VirtualUser")
    local vim = game:service("VirtualInputManager")
    local PathfindingService = game:GetService("PathfindingService")
    Stopscript = 0
    SkipTasks = 0
    function GetToPosition(x,y,z)
        if Stopscript == 0 then
            if not tonumber(x) then
                x = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.X
            end
            if not tonumber(y) then
                y = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.Y
            end
            if not tonumber(z) then
                z = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.Z
            end
            local start = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
            PathfindingService = game:GetService("PathfindingService")
            path = PathfindingService:CreatePath()
            Position = Vector3.new(x,y,z)
            path:ComputeAsync(start.Position, Position)
            waypoints = path:GetWaypoints()

            humanoid = game.Players.LocalPlayer.Character.Humanoid
            for i, waypoint in pairs(waypoints) do
                if table.find(waypoints, waypoint) and Stopscript == 0 then
                    if waypoint.Action == Enum.PathWaypointAction.Jump then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                    humanoid:MoveTo(waypoint.Position)
                    humanoid.MoveToFinished:Wait()
                end
            end
        end
    end

    function TpToPosition(x,y,z)
        if Stopscript == 0 then
            if not tonumber(x) then
                x = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.X
            end
            if not tonumber(y) then
                y = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.Y
            end
            if not tonumber(z) then
                z = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.Z
            end
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(x,y,z)
        end
    end

    function EquipTool(item)
        if Stopscript == 0 then
            for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                if v.Name == item then
                    game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):EquipTool(v)
                end
            end
        end
    end

    local player = game.Players.LocalPlayer
    local UnderPlayer = Instance.new("Part")
    UnderPlayer.Parent = game.workspace
    UnderPlayer.CFrame = CFrame.new(50000,40000,5000)
    UnderPlayer.Size = Vector3.new(5, 0.01, 5)
    UnderPlayer.Anchored = true
    UnderPlayer.Material = Enum.Material.ForceField

    local function SetGround()
        coroutine.wrap(function()
            while tweenground == 1 and Stopscript == 0 do
                wait()
                UnderPlayer.CFrame = CFrame.new(game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame.X, game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame.Y, game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame.Z) * CFrame.new(0, -3.0248,0)
            end
            UnderPlayer.CFrame = CFrame.new(50000,40000,5000)
        end)()
    end
    tween = nil
    function TweenToPosition(x,y,z, Time)
        if Stopscript == 0 then
            if not tonumber(x) then
                x = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.X
            end
            if not tonumber(y) then
                y = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.Y
            end
            if not tonumber(z) then
                z = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position.Z
            end
            if Time == nil then
                Time = 1
            end
            local TweenService = game:GetService("TweenService")
            local part = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
            local goal = {}
            goal.CFrame = CFrame.new(x,y,z)
            local tweenInfo = TweenInfo.new(Time, Enum.EasingStyle.Linear)
            tween = TweenService:Create(part, tweenInfo, goal)
            tween:Play()
            tweenground = 1
            SetGround()
            tween.Completed:Wait()
            tweenground = 0
        end
    end

    function ServerHop()
        if Stopscript == 0 then
            local Player = game.Players.LocalPlayer    
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place,_id = game.PlaceId, game.JobId
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Next; repeat
            local Servers = ListServers(Next)
            for i,v in next, Servers.data do
                if v.playing < v.maxPlayers and v.id ~= _id then
                    local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
                    if s then break end
                end
            end
            
            Next = Servers.nextPageCursor
            until not Next
        end
    end

    function Keybind(Keybind,Times, Delay, Hold)
        if Stopscript == 0 then
            if Times == nil then
                Times = 1
            end
            if Keybind ~= nil then
                for x = 1,Times do
                    if Delay == nil and tonumber(Delay) then
                        wait(Delay)
                    end
                    vim:SendKeyEvent(true, tostring(Keybind), false, game)
                    if Hold ~= nil and tonumber(Hold) then
                        wait(Hold)
                    end
                    vim:SendKeyEvent(false, tostring(Keybind), false, game)
                end
            end
        end
    end

    function LeftClick(X, Y, Times, Delay, Hold)
        if Stopscript == 0 then
            if Times == nil and tonumber(Times) then
                Times = 1
            end
            if X == nil and tonumber(X) then
                X = 500
            end
            if Y == nil and tonumber(Y) then
                Y = 1000
            end
            for x = 1,Times do
                if Delay == nil and tonumber(Delay) then
                    wait(Delay)
                end
                vim:SendMouseButtonEvent(X, Y, 0, true, game, 1)
                if Hold ~= nil and tonumber(Hold) then
                    wait(Hold)
                end
                vim:SendMouseButtonEvent(X, Y, 0, false, game, 1)
            end
        end
    end

    function Jump()
        if Stopscript == 0 then
            game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
    -- IF
    function CheckIFEqual(v1, v2, Skip)
        if v1 and v2 then
            if v1 ~= v2 then
                SkipTasks = Skip
            end
        else
            warn("Error cant find var1 or var2")
        end
    end
    function CheckIFNotEqual(v1, v2, Skip)
        if v1 and v2 then
            if v1 == v2 then
                SkipTasks = Skip
            end
        else
            warn("Error cant find var1 or var2")
        end
    end
    function CheckIFExists(folder, v1, Skip)
        if folder == nil then
            folder = game.workspace
        end
        local isFound = false
        if folder ~= game.workspace then
            for i,v in pairs(game.workspace:GetDescendants()) do
                if v.Name == folder and v:IsA("Folder") then
                    for i,g in pairs(v:GetDescendants()) do
                        if g.Name == tostring(v1) then
                            isFound = true
                        end
                    end
                end
            end
            if isFound then
                folder = v
                print("Found")
            else
                print("Not Found")
            end
        end
        if not Skip then
            Skip = 1
        end
        if not tonumber(Skip) then
            Skip = 1
        end
        if isFound == false then
            SkipTasks = Skip
        end
    end

    function AutoFarm(parent, Name, Time, item, K1, K2, K3, K4, K5, K6)
        if Stopscript == 0 then
            if Time == nil then
                Time = 0.1
            end
            if parent == nil then
               parent = game.workspace
            else 
                for i,v in pairs(game.workspace:GetDescendants()) do
                    if v.Name == parent then
                        parent = v
                    end
                end
            end
            if parent and Stopscript == 0 then
                for i,v in pairs(parent:GetDescendants()) do
                    if v.Parent and v.Parent:FindFirstChild("Humanoid") and v.Parent:FindFirstChild("HumanoidRootPart") and v.Parent:FindFirstChild("Humanoid").ClassName == "Humanoid" and Stopscript == 0 then
                        if v.Parent and v.Parent:FindFirstChild("Humanoid") and v.Parent:FindFirstChild("HumanoidRootPart") and v.Parent:FindFirstChild("Humanoid").Health > 0 and Stopscript == 0 then
                            if Name ~= nil and Stopscript == 0 then
                                if v.Parent and v.Parent:FindFirstChild("Humanoid") and v.Parent:FindFirstChild("HumanoidRootPart") and v.Parent:FindFirstChild("Humanoid").Health > 0 and Stopscript == 0 then
                                    if v.Parent.Name == Name then
                                        tweenground = 1
                                        SetGround()
                                        repeat
                                            wait()
                                            if Stopscript == 0 then
                                                if v.Parent and v.Parent:FindFirstChild("Humanoid") and v.Parent:FindFirstChild("HumanoidRootPart") and v.Parent:FindFirstChild("Humanoid").Health > 0 and Stopscript == 0 then
                                                    local TweenService = game:GetService("TweenService")
                                                    local part = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
                                                    local goal = {}
                                                    goal.CFrame = v.Parent:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0,0,3)
                                                    local tweenInfo = TweenInfo.new(Time, Enum.EasingStyle.Linear)
                                                    tween = TweenService:Create(part, tweenInfo, goal)
                                                    if v.Parent and v.Parent:FindFirstChild("Humanoid") and v.Parent:FindFirstChild("HumanoidRootPart") and v.Parent:FindFirstChild("Humanoid").Health > 0 and Stopscript == 0 then
                                                        if Stopscript == 0 then
                                                            if Stopscript == 0 then
                                                                coroutine.wrap(function() 
                                                                    tween:Play()
                                                                    tween.Completed:Wait()
                                                                    wait()
                                                                end)()
                                                            end
                                                            if item ~= nil and Stopscript == 0 then
                                                                wait(0.05)
                                                                Equip(item)
                                                            end
                                                            if Stopscript == 0 then
                                                                coroutine.wrap(function()
                                                                    wait(0.05)
                                                                    if K1 ~= nil then
                                                                        loadstring(Keybind(K1))()
                                                                    end
                                                                    if K2 ~= nil then
                                                                        loadstring(Keybind(K2))()
                                                                    end
                                                                    if K3 ~= nil then
                                                                        loadstring(Keybind(K3))()
                                                                    end
                                                                    if K4 ~= nil then
                                                                        loadstring(Keybind(K4))()
                                                                    end
                                                                    if K5 ~= nil then
                                                                        loadstring(Keybind(K5))()
                                                                    end
                                                                    if K6 ~= nil then
                                                                        loadstring(Keybind(K6))()
                                                                    end
                                                                end)()
                                                                coroutine.wrap(function()   
                                                                    wait(0.25)
                                                                    LeftClick()
                                                                end)()
                                                            end
                                                        else
                                                            tween:Cancel()
                                                        end
                                                    end
                                                end
                                            end
                                        until v.Parent.Humanoid.Health == 0 or Stopscript == 1
                                        tweenground = 0
                                    end
                                end
                            end
                        end
                    end
                end
            end
            wait(0.2)
        end
    end


    -- Stop/Start Script
    function CancelTween()
        local TweenService = game:GetService("TweenService")
        local part = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        local goal = {}
        goal.CFrame = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
        local tweenInfo = TweenInfo.new(0, Enum.EasingStyle.Linear)
        tween = TweenService:Create(part, tweenInfo, goal)
        tween:Play()
        tweenground = 0
    end

    function Stop()
        Stopscript = 1
        CancelTween()
        wait(1)
        Stopscript = 0
    end

        
    function Play()
        wait()
        if Stopscript == 0 then
            loadfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")()
            if ToDo then
                for x = 1,#ToDo do
                    if Stopscript == 0 then
                        if SkipTasks > 0 then
                            SkipTasks = SkipTasks - 1
                            warn("Skipped - "..ToDo[x])
                        else
                            loadstring(ToDo[x])()
                        end
                    end
                end
            end
        end
    end

    -- Misc

    function WalkSpeed(t)
        if Stopscript == 0 then
            if t == nil then
                t = 16
            end
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = t
        end
    end
    function JumpPower(t)
        if Stopscript == 0 then
            if t == nil then
                t = 50
            end
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = t
        end
    end
    
    -- Accounts
    function RemoveAccount(number)
        if number ~= nil and tonumber(number) then
            loadfile("Task Manager/MainAccounts.txt")()
            if (not isfile("Task Manager/MainAccounts.txt")) then
                --file doesn't exist so create it
                writefile("Task Manager/MainAccounts.txt", "");
            end
            loadfile("Task Manager/MainAccounts.txt")()
            if MainAccounts then
                tbl = MainAccounts
            else
                tbl = {
                }
            end
            table.remove(tbl,number)
            
            file = "MainAccounts = {\n"
            for i,v in pairs(tbl) do
                local text = i
                local number = v
                file = file.."   ["..i.."] = '"..v.."',\n"
            end
            file = file.."}"
            writefile("Task Manager/MainAccounts.txt", file)
        end
    end
    function AddAccount(txt)
        if txt ~= nil and txt ~= "" then
            if (not isfile("Task Manager/MainAccounts.txt")) then
                writefile("Task Manager/MainAccounts.txt", "");
            end
            loadfile("Task Manager/MainAccounts.txt")()
            if MainAccounts then
                tbl = MainAccounts
            else
                tbl = {
                }
            end
            table.insert(tbl,txt)
            
            file = "MainAccounts = {\n"
            for i,v in pairs(tbl) do
                local text = i
                local number = v
                file = file.."   ["..i.."] = '"..v.."',\n"
            end
            file = file.."}"
            writefile("Task Manager/MainAccounts.txt", file)
        end
    end


    -- File
    if not isfolder("Task Manager") then
        makefolder("Task Manager")
    end  
    if (not isfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")) then
        writefile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt", "");
    end
    if (not isfile("Task Manager/MainAccounts.txt")) then
        writefile("Task Manager/MainAccounts.txt", "");
    end
    loadfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")()
    if not ToDo then
        file = "ToDo = {\n"
        file = file.."}"
        writefile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt", file)
    end

    function ClearTasks()
        writefile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt", "")
    end
    function CopyTasks()
        setclipboard(readfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt"))
    end
    function RemoveTask(number)
        loadfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")()
        if (not isfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")) then
            --file doesn't exist so create it
            writefile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt", "");
        end
        loadfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")()
        if ToDo then
            tbl = ToDo
        else
            tbl = {
            }
        end
        table.remove(tbl,number)
        
        file = "ToDo = {\n"
        for i,v in pairs(tbl) do
            local text = i
            local number = v
            file = file.."   ["..i.."] = '"..v.."',\n"
        end
        file = file.."}"
        writefile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt", file)
    end

    function AddTask(txt)
        if (not isfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")) then
            writefile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt", "");
        end
        loadfile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt")()
        if ToDo then
            tbl = ToDo
        else
            tbl = {
            }
        end
        table.insert(tbl,txt)
        
        file = "ToDo = {\n"
        for i,v in pairs(tbl) do
            local text = i
            local number = v
            file = file.."   ["..i.."] = '"..v.."',\n"
        end
        file = file.."}"
        writefile("Task Manager/"..game.Players.LocalPlayer.UserId..".txt", file)
    end






















    -- Main Accounts
    MainAccounts = {
        
    }
    ToFollow = false
    Following = nil
    prefix = "!"
    local players, replicatedStorage = game:GetService("Players"), game:GetService("ReplicatedStorage");
    local defaultChatSystemChatEvents = replicatedStorage:FindFirstChild("DefaultChatSystemChatEvents");
    local onMessageDoneFiltering = defaultChatSystemChatEvents:FindFirstChild("OnMessageDoneFiltering");
    onMessageDoneFiltering.OnClientEvent:Connect(function(messageData)
        if Stopscript == 0 then
            loadfile("Task Manager/MainAccounts.txt")()
            if not table.find(MainAccounts, game.Players.LocalPlayer.Name) then
                local speaker, message = players[messageData.FromSpeaker], messageData.Message
                local plr = speaker
                if table.find(MainAccounts, plr.Name) then
                    if string.lower(messageData.Message):match("!here") then
                        game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        wait(0.1)
                        local TweenService = game:GetService("TweenService")
                        local part = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
                        local goal = {}
                        goal.CFrame = game.Players[plr.Name].Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.new(math.random(-10,10),0,math.random(-10,10))
                        local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear)
                        tween = TweenService:Create(part, tweenInfo, goal)
                        tween:Play()
                        tweenground = 1
                        SetGround()
                        tween.Completed:Wait()
                        tweenground = 0
                    end
                    if string.lower(messageData.Message):match("!follow") then
                        local split_result = string.split(messageData.Message," ")
                        if #split_result >= 2 then
                            if game.Players:FindFirstChild(split_result[2]) then
                                Following = split_result[2]
                            else
                                local foundplayer = false
                                for i,v in pairs(game.Players:GetChildren()) do
                                    if string.lower(v.Name):match(string.lower(split_result[2])) then
                                        if foundplayer == false then
                                            print(string.lower(v.Name), string.lower(split_result[2]))
                                            Following = v.Name
                                            foundplayer = true
                                        end
                                    end
                                end
                                if foundplayer == false then
                                    Following = nil
                                end
                            end
                        else
                            Following = plr.Name
                        end
                        ToFollow = true
                    end
                    if string.lower(messageData.Message):match("!unfollow") then
                        Following = nil
                        ToFollow = false
                    end
                    if string.lower(messageData.Message):match("!jump") then
                        Jump()
                    end
                    if string.lower(messageData.Message):match("!tweentoposition") then
                        loadstring(messageData.Message)()
                    end
                end
            end
        end
    end)
    coroutine.wrap(function()
        while wait() do
            if not table.find(MainAccounts, game.Players.LocalPlayer.Name) then
                if Following ~= nil and Stopscript == 0 and ToFollow then
                    if Following ~= game.Players.LocalPlayer.Name then
                        if tostring(Following) then
                            if game.Players:FindFirstChild(Following) ~= nil and game.Players:FindFirstChild(Following) then
                                if game.Players[Following].Character:FindFirstChild("HumanoidRootPart") ~= nil and game.Players[Following].Character:FindFirstChild("HumanoidRootPart") and game.Players[Following].Character:FindFirstChild("Humanoid") ~= nil and game.Players[Following].Character:FindFirstChild("Humanoid") then
                                    pos = game.Players[Following].Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.new(0,0,3)
                                    game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):MoveTo(pos.Position)
                                end
                            end
                        end
                    end
                end
            end
        end
    end)()
end

game:GetService("Players").LocalPlayer.Idled:connect(function()
    vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(1)
    vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
